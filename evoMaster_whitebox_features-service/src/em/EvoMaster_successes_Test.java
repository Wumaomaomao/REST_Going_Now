import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-11-19T18:26:04.150+08:00[Asia/Shanghai]
 * <br>
 * The generated test suite contains 35 tests
 * <br>
 * Covered targets: 450
 * <br>
 * Used time: 0h 30m 1s
 * <br>
 * Needed budget for current results: 78%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 232L)
                .d("NAME", "\"HqfR\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 231L)
                .d("NAME", "\"ImitrCnleUJFOg\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 232L)
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/HqfR/configurations/ImitrCnleUJFOg/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test
    public void test_1() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 642L)
                .d("NAME", "\"pBYmOh\"")
            .and().insertInto("FEATURE", 641L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"c\"")
                .r("PRODUCT_ID", 642L)
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/pBYmOh/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("c"))
                .body("[0].'description'", nullValue());
        
    }
    
    
    @Test
    public void test_2() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 6342L)
                .d("NAME", "\"1jOa6\"")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/1jOa6")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("1jOa6"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(0));
        
    }
    
    
    @Test
    public void test_3() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 173L)
                .d("NAME", "\"oXOpl\"")
            .and().insertInto("FEATURE", 172L)
                .d("DESCRIPTION", "\"Ar_D\"")
                .d("NAME", "\"rQa2ezRagNBcL\"")
                .r("PRODUCT_ID", 173L)
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/oXOpl/features/rQa2ezRagNBcL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("rQa2ezRagNBcL"))
                .body("'description'", nullValue());
        
    }
    
    
    @Test
    public void test_4() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 986L)
                .d("NAME", "\"iFw3\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 985L)
                .d("NAME", "\"M7vStA527\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 986L)
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/iFw3/configurations/M7vStA527")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("M7vStA527"))
                .body("'valid'", nullValue())
                .body("'activedFeatures'.size()", equalTo(0));
        
    }
    
    
    @Test
    public void test_5() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 3974L)
                .d("NAME", "\"VcdzYPZPsXCH7G\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 3973L)
                .d("NAME", "\"zzgrRzoUKPx\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 3974L)
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/VcdzYPZPsXCH7G/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("", hasItems("zzgrRzoUKPx"));
        
    }
    
    
    @Test
    public void test_6() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/1WYQh_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/1WYQh_/features"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test
    public void test_7() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/EqPnywQ5ymX")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/EqPnywQ5ymX")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("EqPnywQ5ymX"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(0));
        
    }
    
    
    @Test
    public void test_8() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/k5KU96q4aSH")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/k5KU96q4aSH/configurations/TkZtP"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/k5KU96q4aSH/configurations/TkZtP"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("TkZtP"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
    }
    
    
    @Test
    public void test_9() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/APR3pBuBSm")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=yvYxutu0AJPEe")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/APR3pBuBSm/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=cTs19EjF&requiredFeature=aIN6As")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/APR3pBuBSm/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/APR3pBuBSm")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/APR3pBuBSm")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("APR3pBuBSm"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(2))
                .body("'constraints'[0].'sourceFeatureName'", containsString("cTs19EjF"))
                .body("'constraints'[0].'requiredFeatureName'", containsString("aIN6As"))
                .body("'constraints'[0].'type'", containsString("requires"))
                .body("'constraints'[1].'sourceFeatureName'", containsString("yvYxutu0AJPEe"))
                .body("'constraints'[1].'requiredFeatureName'", nullValue())
                .body("'constraints'[1].'type'", containsString("requires"));
        
    }
    
    
    @Test
    public void test_10() throws Exception {
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/90X_RA_dZciTE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/90X_RA_dZciTE/configurations/_J3g"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_configurationName, baseUrlOfSut + "/products/90X_RA_dZciTE/configurations/_J3g/features"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test
    public void test_12() throws Exception {
        
        String location_productName = "";
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 4320L)
                .d("NAME", "\"VKIoR9CXTaPiQ\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 4319L)
                .d("NAME", "\"eMLzuqZ\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 4320L)
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/VKIoR9CXTaPiQ/configurations/eMLzuqZ/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/VKIoR9CXTaPiQ")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/VKIoR9CXTaPiQ/features/6F"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/VKIoR9CXTaPiQ/features/6F"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("6F"))
                .body("'description'", nullValue());
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/VKIoR9CXTaPiQ")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/VKIoR9CXTaPiQ/configurations"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("", hasItems("eMLzuqZ"));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("", hasItems("VKIoR9CXTaPiQ", "VKIoR9CXTaPiQ", "VKIoR9CXTaPiQ"));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/VKIoR9CXTaPiQ")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_7.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/VKIoR9CXTaPiQ/constraints/684"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/VKIoR9CXTaPiQ")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_13() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/R9IsngBT3RSyt")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=79A6YtXQoByy1")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/R9IsngBT3RSyt/features/pjvWBBdK1k_7FAr"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/R9IsngBT3RSyt/features/pjvWBBdK1k_7FAr"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("pjvWBBdK1k_7FAr"))
                .body("'description'", nullValue());
        
    }
    
    
    @Test
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/gCbOOcLb_Kb/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test
    public void test_15() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 861L)
                .d("NAME", "\"bs5boHNqXPVCJqL\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 860L)
                .d("NAME", "\"jttTrJ3\"")
            .and().insertInto("PRODUCT", 859L)
                .d("NAME", "\"GN3ceUg2v3ncFzeL\"")
            .and().insertInto("FEATURE", 858L)
                .d("NAME", "\"ziyDe0\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 857L)
                .r("IN_CONFIGURATIONS_ID", 860L)
                .r("ACTIVED_FEATURES_ID", 858L)
            .and().insertInto("PRODUCT", 856L)
                .d("NAME", "\"GsWk3\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 855L)
                .d("NAME", "\"kz21_c4MWq2JaL5\"")
            .and().insertInto("PRODUCT", 854L)
                .d("NAME", "\"IZbLEPFIlWpIp\"")
            .and().insertInto("FEATURE", 853L)
                .d("NAME", "\"9cOQuzJqbTad\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 852L)
                .r("IN_CONFIGURATIONS_ID", 855L)
                .r("ACTIVED_FEATURES_ID", 853L)
            .and().insertInto("PRODUCT", 851L)
                .d("NAME", "\"ny\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 850L)
                .d("NAME", "\"s4XxhfvfS_Vb04\"")
            .and().insertInto("PRODUCT", 849L)
                .d("NAME", "\"9\"")
            .and().insertInto("FEATURE", 848L)
                .d("NAME", "\"IdeKii5L\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 847L)
                .r("IN_CONFIGURATIONS_ID", 850L)
                .r("ACTIVED_FEATURES_ID", 848L)
            .and().insertInto("PRODUCT", 846L)
                .d("NAME", "\"UWmKbNi6akbkR6rE\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 845L)
                .d("NAME", "\"zIgga\"")
            .and().insertInto("PRODUCT", 844L)
                .d("NAME", "\"fVo_deMbF\"")
            .and().insertInto("FEATURE", 843L)
                .d("NAME", "\"q5TCRbCivUOop3\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 842L)
                .r("IN_CONFIGURATIONS_ID", 845L)
                .r("ACTIVED_FEATURES_ID", 843L)
            .and().insertInto("PRODUCT", 841L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 840L)
                .d("NAME", "\"KzEzJqn0573\"")
                .r("PRODUCT_ID", 841L)
            .and().insertInto("PRODUCT", 839L)
                .d("NAME", "\"m\"")
            .and().insertInto("FEATURE", 838L)
                .d("NAME", "\"bbtY\"")
                .r("PRODUCT_ID", 839L)
            .and().insertInto("PRODUCT", 837L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 836L)
                .d("NAME", "\"7Mw\"")
                .r("PRODUCT_ID", 837L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/iI0DLFdtHyXsLy")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=X_iuMFdJ1tLxLEn")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/iI0DLFdtHyXsLy/features/dWSccGdK"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/iI0DLFdtHyXsLy")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/iI0DLFdtHyXsLy/configurations/kw"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/iI0DLFdtHyXsLy/configurations/kw/features/dWSccGdK"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(13))
                .body("", hasItems("bs5boHNqXPVCJqL", "GN3ceUg2v3ncFzeL", "GsWk3", "IZbLEPFIlWpIp", "ny", "9", "UWmKbNi6akbkR6rE", "fVo_deMbF", "", "m", "", "iI0DLFdtHyXsLy", "iI0DLFdtHyXsLy"));
        
    }
    
    
    @Test
    public void test_16() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/sw55a9uA8dDj5MUQ")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/sw55a9uA8dDj5MUQ/configurations/Vts3lf"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_17() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/n6")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("requiredFeature=T")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/n6/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/n6/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_18() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/zPL")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("excludedFeature=6KU9P")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/zPL/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/zPL/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_19() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/y5ppetH")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=7D3t2SHOpW2tMsw")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/y5ppetH/features/27298"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/y5ppetH/features/sZYWuuk"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_20() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/f2Alyc4RTu")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/f2Alyc4RTu/configurations/m2dIbhtANr6SCk"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/f2Alyc4RTu/configurations/m2dIbhtANr6SCk"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_21() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2426L)
                .d("NAME", "\"U\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2425L)
                .d("NAME", "\"k7gHleN\"")
            .and().insertInto("PRODUCT", 2424L)
                .d("NAME", "\"5IhCEhUNREC\"")
            .and().insertInto("FEATURE", 2423L)
                .d("NAME", "\"LbRvLAdG5\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2422L)
                .r("IN_CONFIGURATIONS_ID", 2425L)
                .r("ACTIVED_FEATURES_ID", 2423L)
            .and().insertInto("PRODUCT", 2421L)
                .d("NAME", "\"8NIMeBGj2wta1_lk\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2420L)
                .d("NAME", "\"QkazQ\"")
            .and().insertInto("PRODUCT", 2419L)
                .d("NAME", "\"GdGroyml\"")
            .and().insertInto("FEATURE", 2418L)
                .d("NAME", "\"YN0\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2417L)
                .r("IN_CONFIGURATIONS_ID", 2420L)
                .r("ACTIVED_FEATURES_ID", 2418L)
            .and().insertInto("PRODUCT", 2416L)
                .d("NAME", "\"pUREk\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2415L)
                .d("NAME", "\"5meV74\"")
            .and().insertInto("PRODUCT", 2414L)
                .d("NAME", "\"ked\"")
            .and().insertInto("FEATURE", 2413L)
                .d("NAME", "\"ut\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2412L)
                .r("IN_CONFIGURATIONS_ID", 2415L)
                .r("ACTIVED_FEATURES_ID", 2413L)
            .and().insertInto("PRODUCT", 2411L)
                .d("NAME", "\"9IUG4Aoh\"")
            .and().insertInto("FEATURE", 2410L)
                .d("NAME", "\"hS1VRmVI1KNZPLqT\"")
                .r("PRODUCT_ID", 2411L)
            .and().insertInto("PRODUCT", 2409L)
                .d("NAME", "\"PcX\"")
            .and().insertInto("FEATURE", 2408L)
                .d("NAME", "\"tMBN62rJ2Zx4\"")
                .r("PRODUCT_ID", 2409L)
            .and().insertInto("PRODUCT", 2407L)
                .d("NAME", "\"bZzDTMYTpMClx\"")
            .and().insertInto("FEATURE", 2406L)
                .d("NAME", "\"y\"")
                .r("PRODUCT_ID", 2407L)
            .and().insertInto("PRODUCT", 2405L)
                .d("NAME", "\"wLahdmoy\"")
            .and().insertInto("FEATURE", 2404L)
                .d("NAME", "\"3l\"")
                .r("PRODUCT_ID", 2405L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/9XGkLmTq")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=lUMh")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/9XGkLmTq/features/AV8B"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/9XGkLmTq")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/9XGkLmTq/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("excludedFeature=k")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/9XGkLmTq/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/9XGkLmTq")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/9XGkLmTq/configurations/DYFyI01zhZdI3mL"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/9XGkLmTq/configurations/DYFyI01zhZdI3mL/features/AV8B"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_configurationName, baseUrlOfSut + "/products/9XGkLmTq/configurations/DYFyI01zhZdI3mL/features/AV8B"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_22() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2426L)
                .d("NAME", "\"_EM_4020_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2425L)
                .d("NAME", "\"k7gHleN\"")
            .and().insertInto("PRODUCT", 2424L)
                .d("NAME", "\"gEUU2218_UYZ_\"")
            .and().insertInto("FEATURE", 2423L)
                .d("NAME", "\"_EM_4021_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2422L)
                .r("IN_CONFIGURATIONS_ID", 2425L)
                .r("ACTIVED_FEATURES_ID", 2423L)
            .and().insertInto("PRODUCT", 2421L)
                .d("NAME", "\"_EM_4205_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2420L)
                .d("NAME", "\"_EM_2220_XYZ_\"")
            .and().insertInto("PRODUCT", 2419L)
                .d("NAME", "\"ny06OD5wJDq8RkL8\"")
            .and().insertInto("FEATURE", 2418L)
                .d("NAME", "\"YN0\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2417L)
                .r("IN_CONFIGURATIONS_ID", 2425L)
                .r("ACTIVED_FEATURES_ID", 2418L)
            .and().insertInto("PRODUCT", 2416L)
                .d("NAME", "\"_EM_2222_XYZ_j\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2415L)
                .d("NAME", "\"5meV7\"")
            .and().insertInto("PRODUCT", 2414L)
                .d("NAME", "\"p\"")
            .and().insertInto("FEATURE", 2413L)
                .d("NAME", "\"ut\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2412L)
                .r("IN_CONFIGURATIONS_ID", 2420L)
                .r("ACTIVED_FEATURES_ID", 2423L)
            .and().insertInto("PRODUCT", 2411L)
                .d("NAME", "\"_EM_4206_XYZ_\"")
            .and().insertInto("FEATURE", 2410L)
                .d("NAME", "\"hU1VUmUU1KUZPUqT\"")
                .r("PRODUCT_ID", 2416L)
            .and().insertInto("PRODUCT", 2409L)
                .d("NAME", "\"_EM_4024_XYZ_\"")
            .and().insertInto("FEATURE", 2408L)
                .d("NAME", "\"_EM_2223_XYZ_\"")
                .r("PRODUCT_ID", 2424L)
            .and().insertInto("PRODUCT", 2407L)
                .d("NAME", "\"bZzDTMYTpMClx\"")
            .and().insertInto("FEATURE", 2406L)
                .d("NAME", "\"_EM_2224_XYZ_\"")
                .r("PRODUCT_ID", 2409L)
            .and().insertInto("PRODUCT", 2405L)
                .d("NAME", "\"_=M_2225_XYZ_\"")
            .and().insertInto("FEATURE", 2404L)
                .d("NAME", "\"_EM_4207_XYZ_\"")
                .r("PRODUCT_ID", 2411L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/9_uNMNkEC")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=CR6egTG")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/9_uNMNkEC/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/9_uNMNkEC")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/9_uNMNkEC")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/9_uNMNkEC")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=_EM_4017_XYZ_")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/9_uNMNkEC/features/oPwrH8k"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/9_uNMNkEC")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/8NIMeBGj2wta1_lk/configurations/35180"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_7.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/9_uNMNkEC/configurations/_EM_4018_XYZ_/features/oPwrH8k"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_configurationName, baseUrlOfSut + "/products/9_uNMNkEC/configurations/_EM_4018_XYZ_/features/oPwrH8k"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_23() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2426L)
                .d("NAME", "\"U\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2425L)
                .d("NAME", "\"k7gHleN\"")
            .and().insertInto("PRODUCT", 2424L)
                .d("NAME", "\"5IhCEhUNREC\"")
            .and().insertInto("FEATURE", 2423L)
                .d("NAME", "\"LbRvLAdG5\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2422L)
                .r("IN_CONFIGURATIONS_ID", 2425L)
                .r("ACTIVED_FEATURES_ID", 2423L)
            .and().insertInto("PRODUCT", 2421L)
                .d("NAME", "\"8NIMeBGj2wta1_lk\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2420L)
                .d("NAME", "\"QkazQ\"")
            .and().insertInto("PRODUCT", 2419L)
                .d("NAME", "\"GdGroyml\"")
            .and().insertInto("FEATURE", 2418L)
                .d("NAME", "\"YN0\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2417L)
                .r("IN_CONFIGURATIONS_ID", 2420L)
                .r("ACTIVED_FEATURES_ID", 2418L)
            .and().insertInto("PRODUCT", 2416L)
                .d("NAME", "\"pUREk\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2415L)
                .d("NAME", "\"5meV74\"")
            .and().insertInto("PRODUCT", 2414L)
                .d("NAME", "\"ked\"")
            .and().insertInto("FEATURE", 2413L)
                .d("NAME", "\"ut\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2412L)
                .r("IN_CONFIGURATIONS_ID", 2415L)
                .r("ACTIVED_FEATURES_ID", 2413L)
            .and().insertInto("PRODUCT", 2411L)
                .d("NAME", "\"9IUG4Aoh\"")
            .and().insertInto("FEATURE", 2410L)
                .d("NAME", "\"hS1VRmVI1KNZPLqT\"")
                .r("PRODUCT_ID", 2411L)
            .and().insertInto("PRODUCT", 2409L)
                .d("NAME", "\"PcX\"")
            .and().insertInto("FEATURE", 2408L)
                .d("NAME", "\"tMBN62rJ2Zx4\"")
                .r("PRODUCT_ID", 2409L)
            .and().insertInto("PRODUCT", 2407L)
                .d("NAME", "\"bZzDTMYTpMClx\"")
            .and().insertInto("FEATURE", 2406L)
                .d("NAME", "\"y\"")
                .r("PRODUCT_ID", 2407L)
            .and().insertInto("PRODUCT", 2405L)
                .d("NAME", "\"wLahdmoy\"")
            .and().insertInto("FEATURE", 2404L)
                .d("NAME", "\"3l\"")
                .r("PRODUCT_ID", 2405L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/4b6wJyGWPLy2")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=CR6egTG")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/4b6wJyGWPLy2/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/4b6wJyGWPLy2")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=lUMh")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/4b6wJyGWPLy2/features/AV8B"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/4b6wJyGWPLy2")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/4b6wJyGWPLy2/configurations/DYFyI01zhZdI3mL"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/4b6wJyGWPLy2/configurations/DYFyI01zhZdI3mL/features/AV8B"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_configurationName, baseUrlOfSut + "/products/4b6wJyGWPLy2/configurations/DYFyI01zhZdI3mL/features/AV8B"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_24() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2426L)
                .d("NAME", "\"U\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2425L)
                .d("NAME", "\"k7gHleN\"")
            .and().insertInto("PRODUCT", 2424L)
                .d("NAME", "\"5IhCEhUNREC\"")
            .and().insertInto("FEATURE", 2423L)
                .d("NAME", "\"LbRvLAdG5\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2422L)
                .r("IN_CONFIGURATIONS_ID", 2425L)
                .r("ACTIVED_FEATURES_ID", 2423L)
            .and().insertInto("PRODUCT", 2421L)
                .d("NAME", "\"8NIMeBGj2wta1_lk\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2420L)
                .d("NAME", "\"QkazQ\"")
            .and().insertInto("PRODUCT", 2419L)
                .d("NAME", "\"GdGroyml\"")
            .and().insertInto("FEATURE", 2418L)
                .d("NAME", "\"YN0\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2417L)
                .r("IN_CONFIGURATIONS_ID", 2420L)
                .r("ACTIVED_FEATURES_ID", 2418L)
            .and().insertInto("PRODUCT", 2416L)
                .d("NAME", "\"pUREk\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2415L)
                .d("NAME", "\"5meV74\"")
            .and().insertInto("PRODUCT", 2414L)
                .d("NAME", "\"ked\"")
            .and().insertInto("FEATURE", 2413L)
                .d("NAME", "\"ut\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2412L)
                .r("IN_CONFIGURATIONS_ID", 2415L)
                .r("ACTIVED_FEATURES_ID", 2413L)
            .and().insertInto("PRODUCT", 2411L)
                .d("NAME", "\"9IUG4Aoh\"")
            .and().insertInto("FEATURE", 2410L)
                .d("NAME", "\"hS1VRmVI1KNZPLqT\"")
                .r("PRODUCT_ID", 2411L)
            .and().insertInto("PRODUCT", 2409L)
                .d("NAME", "\"PcX\"")
            .and().insertInto("FEATURE", 2408L)
                .d("NAME", "\"tMBN62rJ2Zx4\"")
                .r("PRODUCT_ID", 2409L)
            .and().insertInto("PRODUCT", 2407L)
                .d("NAME", "\"bZzDTMYTpMClx\"")
            .and().insertInto("FEATURE", 2406L)
                .d("NAME", "\"y\"")
                .r("PRODUCT_ID", 2407L)
            .and().insertInto("PRODUCT", 2405L)
                .d("NAME", "\"wLahdmoy\"")
            .and().insertInto("FEATURE", 2404L)
                .d("NAME", "\"3l\"")
                .r("PRODUCT_ID", 2405L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/UlRheXkLGgF1kjQe")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=lUMh")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/UlRheXkLGgF1kjQe/features/AV8B"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/UlRheXkLGgF1kjQe")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/UlRheXkLGgF1kjQe/configurations/DYFyI01zhZdI3mL"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/UlRheXkLGgF1kjQe/configurations/DYFyI01zhZdI3mL/features/AV8B"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_configurationName, baseUrlOfSut + "/products/UlRheXkLGgF1kjQe/configurations/DYFyI01zhZdI3mL/features/AV8B"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/mArY")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/mArY")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_26() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/IZ7ZxyZpFYRd")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=Hu&excludedFeature=")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/IZ7ZxyZpFYRd/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/f8sM")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_28() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/YrfWi9YHfrJKh")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=X4POPOKIY8JCD_c")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/YrfWi9YHfrJKh/features/DchLJVrdlv_1oH1u"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/YrfWi9YHfrJKh/features/DchLJVrdlv_1oH1u"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_29() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/WxO8i5U")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("requiredFeature=QzoB")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/WxO8i5U/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_30() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/047jTTv749BTWi")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/047jTTv749BTWi/features/d"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_31() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 731L)
                .d("NAME", "\"KHGhZmlEqzBH0j\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 730L)
                .d("NAME", "\"ON1J3N3w1U8tkKpw\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 731L)
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/KHGhZmlEqzBH0j/configurations/ON1J3N3w1U8tkKpw")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_32() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 8822L)
                .d("NAME", "\"Vxw\"")
            .and().insertInto("FEATURE", 8821L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"LvlGNo_4rLZd9\"")
                .r("PRODUCT_ID", 8822L)
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/Vxw/features/LvlGNo_4rLZd9")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_33() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 1373L)
                .d("NAME", "\"YN\"")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/YN")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_34() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/IU/constraints/778")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }


}
