import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-11-19T18:26:03.670+08:00[Asia/Shanghai]
 * <br>
 * The generated test suite contains 32 tests
 * <br>
 * Covered targets: 298
 * <br>
 * Used time: 0h 30m 0s
 * <br>
 * Needed budget for current results: 78%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_0_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 497L)
                .d("NAME", "\"_EM_253_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/MAT%7C")
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsResource_58_addProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/yM10W")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_2_with500() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("requiredFeature=LLN5wel")
                .post(baseUrlOfSut + "/products/5FC/constraints/requires")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_3_with500() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/0t5BZ/constraints/excludes")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_4_with500() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/B98JeIC4dLBiY_h/configurations/Pse1")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_5_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_5_with500() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=Uhwj")
                .post(baseUrlOfSut + "/products/7w0kWeQVR/features/emf_nUIS9ewCE")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_6_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_6_with500() throws Exception {
        
        String location_productName = "";
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 2825L)
                .d("NAME", "\"e1fmyqp\"")
            .and().insertInto("FEATURE", 2824L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"wRo1NccQ\"")
                .r("PRODUCT_ID", 2825L)
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/e1fmyqp")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=owAFIOLdLNHs7o3")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/e1fmyqp/features/wRo1NccQ"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_64_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_7_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_7_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 535L)
                .d("NAME", "\"tr\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 534L)
                .d("NAME", "\"Wbmvh_r6VvFu\"")
            .and().insertInto("PRODUCT", 533L)
                .d("NAME", "\"T7Y0cxo\"")
            .and().insertInto("FEATURE", 532L)
                .d("NAME", "\"QQH5rC\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 531L)
                .r("IN_CONFIGURATIONS_ID", 534L)
                .r("ACTIVED_FEATURES_ID", 532L)
            .and().insertInto("PRODUCT", 530L)
                .d("NAME", "\"5uzp\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 529L)
                .d("NAME", "\"7n5h2QbHsbY\"")
            .and().insertInto("PRODUCT", 528L)
                .d("NAME", "\"_EM_275_XYZ_\"")
            .and().insertInto("FEATURE", 527L)
                .d("NAME", "\"_EM_276_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 526L)
                .r("IN_CONFIGURATIONS_ID", 529L)
                .r("ACTIVED_FEATURES_ID", 532L)
            .and().insertInto("PRODUCT", 525L)
                .d("NAME", "\"KVh\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 524L)
                .d("NAME", "\"D5y0zCl2KegMvl\"")
            .and().insertInto("PRODUCT", 523L)
                .d("NAME", "\"_EM_277_XYZ_\"")
            .and().insertInto("FEATURE", 522L)
                .d("NAME", "\"\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 521L)
                .r("IN_CONFIGURATIONS_ID", 534L)
                .r("ACTIVED_FEATURES_ID", 522L)
            .and().insertInto("PRODUCT", 520L)
                .d("NAME", "\"_EM_278_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 519L)
                .d("NAME", "\"_EM_279_XYZ_\"")
            .and().insertInto("PRODUCT", 518L)
                .d("NAME", "\"_EM_280_XYZ_\"")
            .and().insertInto("FEATURE", 517L)
                .d("NAME", "\"_EM_281_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 516L)
                .r("IN_CONFIGURATIONS_ID", 519L)
                .r("ACTIVED_FEATURES_ID", 527L)
            .and().insertInto("PRODUCT", 515L)
                .d("NAME", "\"dzZu\"")
            .and().insertInto("FEATURE", 514L)
                .d("NAME", "\"RJeV\"")
                .r("PRODUCT_ID", 523L)
            .and().insertInto("PRODUCT", 513L)
                .d("NAME", "\"_EM_282_XYZ_\"")
            .and().insertInto("FEATURE", 512L)
                .d("NAME", "\"_EM_283_XYZ_\"")
                .r("PRODUCT_ID", 513L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_272_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_272_XYZ_/configurations/%5DEM_273UXUZ_"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsConfigurationResource_42_addConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_8_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_8_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/5_TLf/features/uZzw3gwA6YINj")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_9_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_9_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/8rda71FHTTHLO/features")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_10_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_10_with500() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/TQt7yrhVr2dnfJ/configurations/gai3wR/features/58TfUkO7")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_79_addFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_11_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_11_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 1701L)
                .d("NAME", "\"_EM_6101_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1700L)
                .d("NAME", "\"_EM_877_XYZ_\"")
            .and().insertInto("PRODUCT", 1699L)
                .d("NAME", "\"F19PCfHkmLe5E9\"")
            .and().insertInto("FEATURE", 1698L)
                .d("NAME", "\"_EM_6102_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1697L)
                .r("IN_CONFIGURATIONS_ID", 1700L)
                .r("ACTIVED_FEATURES_ID", 1698L)
            .and().insertInto("PRODUCT", 1696L)
                .d("NAME", "\"BGv\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1695L)
                .d("NAME", "\"_EM_6103_XYZ_\"")
            .and().insertInto("PRODUCT", 1694L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 1693L)
                .d("NAME", "\"444pPgH501Xgi6W\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1692L)
                .r("IN_CONFIGURATIONS_ID", 1700L)
                .r("ACTIVED_FEATURES_ID", 1693L)
            .and().insertInto("PRODUCT", 1691L)
                .d("NAME", "\"6kNqD\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1690L)
                .d("NAME", "\"Uo1U4T\"")
            .and().insertInto("PRODUCT", 1689L)
                .d("NAME", "\"_EM_6104_XYZ_\"")
            .and().insertInto("FEATURE", 1688L)
                .d("NAME", "\"wXPdU\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1687L)
                .r("IN_CONFIGURATIONS_ID", 1695L)
                .r("ACTIVED_FEATURES_ID", 1698L)
            .and().insertInto("PRODUCT", 1686L)
                .d("NAME", "\"_EM_880_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1685L)
                .d("NAME", "\"1\"")
            .and().insertInto("PRODUCT", 1684L)
                .d("NAME", "\"_EM_881_XYZ_\"")
            .and().insertInto("FEATURE", 1683L)
                .d("NAME", "\"GwNXSNxlfhX\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1682L)
                .r("IN_CONFIGURATIONS_ID", 1685L)
                .r("ACTIVED_FEATURES_ID", 1683L)
            .and().insertInto("PRODUCT", 1681L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 1680L)
                .d("NAME", "\"1Oa7rv\"")
                .r("PRODUCT_ID", 1681L)
            .and().insertInto("PRODUCT", 1679L)
                .d("NAME", "\"_EM_882_XYZ_\"")
            .and().insertInto("FEATURE", 1678L)
                .d("NAME", "\"tbiqy\"")
                .r("PRODUCT_ID", 1684L)
            .and().insertInto("PRODUCT", 1677L)
                .d("NAME", "\"kbyxl04Eho3tCKv\"")
            .and().insertInto("FEATURE", 1676L)
                .d("NAME", "\"_EM_6105_XYZ_\"")
                .r("PRODUCT_ID", 1701L)
            .and().insertInto("PRODUCT", 1675L)
                .d("NAME", "\"_EM_6106_XYZ_\"")
            .and().insertInto("FEATURE", 1674L)
                .d("NAME", "\"zLmzDQb_zJcYh7w1\"")
                .r("PRODUCT_ID", 1675L)
            .and().insertInto("PRODUCT", 1673L)
                .d("NAME", "\"vbaB\"")
            .and().insertInto("FEATURE", 1672L)
                .d("NAME", "\"_EM_6107_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/BcmQqgnhaYLs")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/BcmQqgnhaYLs/configurations"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/BcmQqgnhaYLs/features/h3e63kGC_aeZ1ILj")
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_12_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_12_with500() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/4O7DJBMdW7W/configurations/H")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsConfigurationsDAO_71_deleteConfigurationForProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_13_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_13_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 1095L)
                .d("NAME", "\"_EM_1241_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1094L)
                .d("NAME", "\"_EM_1242_XYZ_\"")
            .and().insertInto("PRODUCT", 1093L)
                .d("NAME", "\"6U0MozfIZq6p\"")
            .and().insertInto("FEATURE", 1092L)
                .d("NAME", "\"Ivr8ZJ50vRWLlDO\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1091L)
                .r("IN_CONFIGURATIONS_ID", 1094L)
                .r("ACTIVED_FEATURES_ID", 1092L)
            .and().insertInto("PRODUCT", 1090L)
                .d("NAME", "\"qznuF99VzjnXN\"")
            .and().insertInto("FEATURE", 1089L)
                .d("NAME", "\"_EM_1243_XYZ_\"")
                .r("PRODUCT_ID", 1095L)
            .and().insertInto("PRODUCT", 1088L)
                .d("NAME", "\"QncBiLrR\"")
            .and().insertInto("FEATURE", 1087L)
                .d("NAME", "\"frcq5ZnuV0FM\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 329L)
                .d("NAME", "\"fesCgML\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 328L)
                .d("ID", "0")
            .and().insertInto("PRODUCT", 327L)
                .d("NAME", "\"_EM_1244_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 326L)
                .d("ID", "740")
            .and().insertInto("PRODUCT", 325L)
                .d("NAME", "\"AAVbP0Q2HNByn55\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 324L)
                .d("ID", "50")
            .and().insertInto("PRODUCT", 323L)
                .d("NAME", "\"Sw4mUX\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 322L)
                .d("ID", "442")
            .and().insertInto("PRODUCT", 321L)
                .d("NAME", "\"wgznZ1H_f0wmLt5\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 320L)
                .d("ID", "0")
            .and().insertInto("PRODUCT", 319L)
                .d("NAME", "\"dTyKZ19k22Gsn\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 318L)
                .d("ID", "8691851684220878938")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/cdiC")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/cdiC/features/Vn0%22Catbu"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsFeaturesResource_33_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=dT")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/cdiC/features/Vn0%22Catbu"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_64_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(11))
                .body("", hasItems("_EM_1241_XYZ_", "6U0MozfIZq6p", "qznuF99VzjnXN", "QncBiLrR", "fesCgML", "_EM_1244_XYZ_", "AAVbP0Q2HNByn55", "Sw4mUX", "wgznZ1H_f0wmLt5", "dTyKZ19k22Gsn", "cdiC"));
        
    }
    
    
    /**
    * [test_14_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_14_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/28/configurations/7/features")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_15_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_15_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/heoR_3_fa6pXxQ77")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/heoR_3_fa6pXxQ77/configurations/lD794WoeB"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_configurationName, baseUrlOfSut + "/products/heoR_3_fa6pXxQ77/configurations/lD794WoeB/features"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        List<InsertionDto> insertions1 = sql().insertInto("PRODUCT", 6565L)
                .d("NAME", "\"heoR_3_fa6pXxQ77\"")
            .and().insertInto("FEATURE", 6564L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"7I3w\"")
                .r("PRODUCT_ID", 6565L)
            .dtos();
        InsertionResultsDto insertions1result = controller.execInsertionsIntoDatabase(insertions1);
        
        ValidatableResponse res_3 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/heoR_3_fa6pXxQ77/features/7I3w")
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
    }
    
    
    /**
    * [test_16_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_16_with500() throws Exception {
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/eZdjadI9")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/eZdjadI9/configurations/korn1A5nK"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/eZdjadI9/configurations/korn1A5nK/features/lC"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_configurationName, baseUrlOfSut + "/products/eZdjadI9/configurations/korn1A5nK/features/lC"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_17_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_17_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 8817L)
                .d("NAME", "\"wt2K\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 8816L)
                .d("ID", "679")
            .and().insertInto("PRODUCT", 8815L)
                .d("NAME", "\"wzuaCoBd6EoPpUwS\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 8814L)
                .d("ID", "-1411")
            .and().insertInto("PRODUCT", 8813L)
                .d("NAME", "\"ftoQ5ziuO7H0R_rB\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 8812L)
                .d("ID", "377")
            .and().insertInto("PRODUCT", 8811L)
                .d("NAME", "\"\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 8810L)
                .d("ID", "-8695589681494475070")
            .and().insertInto("PRODUCT", 8809L)
                .d("NAME", "\"cpKmJtCanWa\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 8808L)
                .d("ID", "880")
            .and().insertInto("PRODUCT", 8807L)
                .d("NAME", "\"Xxl0Uu2gSh8nw\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 8806L)
                .d("ID", "503")
            .and().insertInto("PRODUCT", 8805L)
                .d("NAME", "\"u146AIgDMLA\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 8804L)
                .d("ID", "426")
            .and().insertInto("PRODUCT", 8803L)
                .d("NAME", "\"BVTBjOnbdM\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 8802L)
                .d("ID", "19")
            .and().insertInto("PRODUCT", 8801L)
                .d("NAME", "\"7XHC4\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 8800L)
                .d("ID", "805")
            .and().insertInto("PRODUCT", 8799L)
                .d("NAME", "\"85maVGgUdF\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 8798L)
                .d("ID", "8107784947169677712")
            .and().insertInto("PRODUCT", 7249L)
                .d("NAME", "\"9E1JMWsP3\"")
            .and().insertInto("FEATURE", 7248L)
                .d("NAME", "\"hj\"")
                .r("PRODUCT_ID", 7249L)
            .and().insertInto("PRODUCT", 7247L)
                .d("NAME", "\"DxgGHMU7GvI\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7246L)
                .d("NAME", "\"g7zEby3e\"")
            .and().insertInto("PRODUCT", 7245L)
                .d("NAME", "\"_EM_8810_XYZ_\"")
            .and().insertInto("FEATURE", 7244L)
                .d("NAME", "\"TliYYDcEgvXJH_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7243L)
                .r("IN_CONFIGURATIONS_ID", 7246L)
                .r("ACTIVED_FEATURES_ID", 7244L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(13))
                .body("", hasItems("wt2K", "wzuaCoBd6EoPpUwS", "ftoQ5ziuO7H0R_rB", "", "cpKmJtCanWa", "Xxl0Uu2gSh8nw", "u146AIgDMLA", "BVTBjOnbdM", "7XHC4", "85maVGgUdF", "9E1JMWsP3", "DxgGHMU7GvI", "_EM_8810_XYZ_"));
        
        List<InsertionDto> insertions1 = sql(insertions).insertInto("PRODUCT", 7038L)
                .d("NAME", "\"C3rdD\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7037L)
                .d("NAME", "\"m\"")
                .d("VALID", "false")
                .r("PRODUCT_ID", 7038L)
            .dtos();
        InsertionResultsDto insertions1result = controller.execInsertionsIntoDatabase(insertions1, insertionsresult);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/C3rdD/configurations/m/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/tAqel")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/tAqel/configurations"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/C3rdD")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/2Fv1PM9vU")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=J&excludedFeature=")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/2Fv1PM9vU/constraints/excludes"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_110_addExcludesConstraintToProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_18_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_18_with500() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/pmMAZz84uFWFIV")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_19_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_19_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2426L)
                .d("NAME", "\"5\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2425L)
                .d("NAME", "\"k7gHleN\"")
            .and().insertInto("PRODUCT", 2424L)
                .d("NAME", "\"_EM_2218_XYZ_\"")
            .and().insertInto("FEATURE", 2423L)
                .d("NAME", "\"_EM_2219_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2422L)
                .r("IN_CONFIGURATIONS_ID", 2425L)
                .r("ACTIVED_FEATURES_ID", 2423L)
            .and().insertInto("PRODUCT", 2421L)
                .d("NAME", "\"8NIMeBGj2wta1_lk\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2420L)
                .d("NAME", "\"_EM_2220_XYZ_\"")
            .and().insertInto("PRODUCT", 2419L)
                .d("NAME", "\"_EM_2221_XYZ_\"")
            .and().insertInto("FEATURE", 2418L)
                .d("NAME", "\"YN0\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2417L)
                .r("IN_CONFIGURATIONS_ID", 2425L)
                .r("ACTIVED_FEATURES_ID", 2418L)
            .and().insertInto("PRODUCT", 2416L)
                .d("NAME", "\"_EM_2222_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2415L)
                .d("NAME", "\"5meV74\"")
            .and().insertInto("PRODUCT", 2414L)
                .d("NAME", "\"ked\"")
            .and().insertInto("FEATURE", 2413L)
                .d("NAME", "\"ut\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2412L)
                .r("IN_CONFIGURATIONS_ID", 2415L)
                .r("ACTIVED_FEATURES_ID", 2418L)
            .and().insertInto("PRODUCT", 2411L)
                .d("NAME", "\"9IUG4Aoh\"")
            .and().insertInto("FEATURE", 2410L)
                .d("NAME", "\"hS1VRmVI1KNZPLqT\"")
                .r("PRODUCT_ID", 2414L)
            .and().insertInto("PRODUCT", 2409L)
                .d("NAME", "\"PcX\"")
            .and().insertInto("FEATURE", 2408L)
                .d("NAME", "\"_EM_2223_XYZ_\"")
                .r("PRODUCT_ID", 2414L)
            .and().insertInto("PRODUCT", 2407L)
                .d("NAME", "\"bZzDTMYTpMClx\"")
            .and().insertInto("FEATURE", 2406L)
                .d("NAME", "\"_EM_2224_XYZ_\"")
                .r("PRODUCT_ID", 2409L)
            .and().insertInto("PRODUCT", 2405L)
                .d("NAME", "\"_EM_2225_XYZ_\"")
            .and().insertInto("FEATURE", 2404L)
                .d("NAME", "\"_EM_2226_XYZ_\"")
                .r("PRODUCT_ID", 2411L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_2215_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=CR6egTG")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_2215_XYZ_/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_2215_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=lUMh")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_2215_XYZ_/features/_EM_%22216_XYZ_"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsFeaturesResource_33_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_2215_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_2215_XYZ_/configurations/_EM_2217_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/_EM_2215_XYZ_/configurations/_EM_2217_XYZ_/features/_EM_%22216_XYZ_"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsConfigurationFeaturesResource_37_addFeatureToConfiguration
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_configurationName, baseUrlOfSut + "/products/_EM_2215_XYZ_/configurations/_EM_2217_XYZ_/features/_EM_%22216_XYZ_"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    /**
    * [test_20_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_20_with500() throws Exception {
        
        String location_productName = "";
        String location_configurationName = "";
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 4720L)
                .d("NAME", "\"iuUA_3QRF0u8DZ\"")
            .and().insertInto("FEATURE", 4719L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"uIwIJP6KDM232PtX\"")
                .r("PRODUCT_ID", 4720L)
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/iuUA_3QRF0u8DZ/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("uIwIJP6KDM232PtX"))
                .body("[0].'description'", nullValue());
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/iuUA_3QRF0u8DZ")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/iuUA_3QRF0u8DZ/configurations/AozqV8AX64uIy"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/iuUA_3QRF0u8DZ/configurations/AozqV8AX64uIy/features/ihxuVbnBqzsHtdoa"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/iuUA_3QRF0u8DZ")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/iuUA_3QRF0u8DZ/configurations/AozqV8AX64uIy"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_configurationName, baseUrlOfSut + "/products/iuUA_3QRF0u8DZ/configurations/AozqV8AX64uIy/features"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/iuUA_3QRF0u8DZ")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_7.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/iuUA_3QRF0u8DZ/constraints/-1791478600"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_9 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/iuUA_3QRF0u8DZ")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_9.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/iuUA_3QRF0u8DZ/configurations/AozqV8AX64uIy"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/iuUA_3QRF0u8DZ/configurations/AozqV8AX64uIy"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    /**
    * [test_21_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_21_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 8932L)
                .d("NAME", "\"X4DD19DHhNH\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 8931L)
                .d("ID", "39")
            .and().insertInto("PRODUCT", 8930L)
                .d("NAME", "\"E8\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 8929L)
                .d("ID", "15")
            .and().insertInto("PRODUCT", 8928L)
                .d("NAME", "\"EJ\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 8927L)
                .d("ID", "999")
            .and().insertInto("PRODUCT", 8926L)
                .d("NAME", "\"EjR7w1\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 8925L)
                .d("ID", "870")
            .and().insertInto("PRODUCT", 8924L)
                .d("NAME", "\"2f1nhQQ\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 8923L)
                .d("ID", "308")
            .and().insertInto("PRODUCT", 8922L)
                .d("NAME", "\"\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 8921L)
                .d("ID", "920")
            .and().insertInto("PRODUCT", 8920L)
                .d("NAME", "\"ZDUeS1YGLOzY\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 8919L)
                .d("ID", "975")
            .and().insertInto("PRODUCT", 8918L)
                .d("NAME", "\"LJxPHGWYIMR0\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 8917L)
                .d("ID", "813")
            .and().insertInto("PRODUCT", 6918L)
                .d("NAME", "\"GVK6n\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 6917L)
                .d("NAME", "\"PMtiVZ1amR6\"")
            .and().insertInto("PRODUCT", 6916L)
                .d("NAME", "\"PgMExsUTL\"")
            .and().insertInto("FEATURE", 6915L)
                .d("NAME", "\"gWPRJJ_f889fkr\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 6914L)
                .r("IN_CONFIGURATIONS_ID", 6917L)
                .r("ACTIVED_FEATURES_ID", 6915L)
            .and().insertInto("PRODUCT", 6913L)
                .d("NAME", "\"w5xul2U\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 6912L)
                .d("NAME", "\"8P5NW0M\"")
            .and().insertInto("PRODUCT", 6911L)
                .d("NAME", "\"7sQaEnCUHSk\"")
            .and().insertInto("FEATURE", 6910L)
                .d("NAME", "\"h2RpQdvr\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 6909L)
                .r("IN_CONFIGURATIONS_ID", 6912L)
                .r("ACTIVED_FEATURES_ID", 6910L)
            .and().insertInto("PRODUCT", 6908L)
                .d("NAME", "\"NiddYYK\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 6907L)
                .d("NAME", "\"Y\"")
            .and().insertInto("PRODUCT", 6906L)
                .d("NAME", "\"InwAG1ZL_OC1\"")
            .and().insertInto("FEATURE", 6905L)
                .d("NAME", "\"xcANRyuiOw\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 6904L)
                .r("IN_CONFIGURATIONS_ID", 6907L)
                .r("ACTIVED_FEATURES_ID", 6905L)
            .and().insertInto("PRODUCT", 6903L)
                .d("NAME", "\"wkNnngQgYoN4\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 6902L)
                .d("NAME", "\"a\"")
            .and().insertInto("PRODUCT", 6901L)
                .d("NAME", "\"btkg6wcdhi1w\"")
            .and().insertInto("FEATURE", 6900L)
                .d("NAME", "\"zkIWr\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 6899L)
                .r("IN_CONFIGURATIONS_ID", 6902L)
                .r("ACTIVED_FEATURES_ID", 6900L)
            .and().insertInto("PRODUCT", 6898L)
                .d("NAME", "\"5MEo3v\"")
            .and().insertInto("FEATURE", 6897L)
                .d("NAME", "\"DWxseY\"")
                .r("PRODUCT_ID", 6898L)
            .and().insertInto("PRODUCT", 6896L)
                .d("NAME", "\"VQvOuy1Z\"")
            .and().insertInto("FEATURE", 6895L)
                .d("NAME", "\"C\"")
                .r("PRODUCT_ID", 6896L)
            .and().insertInto("PRODUCT", 6894L)
                .d("NAME", "\"nQQD52i6oIDZS\"")
            .and().insertInto("FEATURE", 6893L)
                .d("NAME", "\"ajo\"")
                .r("PRODUCT_ID", 6894L)
            .and().insertInto("PRODUCT", 6892L)
                .d("NAME", "\"MvohIvF\"")
            .and().insertInto("FEATURE", 6891L)
                .d("NAME", "\"iB_gg0HODMt\"")
                .r("PRODUCT_ID", 6892L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        List<InsertionDto> insertions0 = sql(insertions).insertInto("PRODUCT", 6607L)
                .d("NAME", "\"PrY\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 6606L)
                .d("NAME", "\"2a_8jsbAx8cSW2S\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 6607L)
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0, insertionsresult);
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/PrY")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/PrY/configurations/2a_8jsbAx8cSW2S"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/PrY/configurations/2a_8jsbAx8cSW2S/features/IgUxry"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/PrY")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/PrY/constraints/500356605"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/PzOIzZrLWYFqv864")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("requiredFeature=lc")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/PzOIzZrLWYFqv864/constraints/requires"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_96_addRequiresConstraintToProduct
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=srOo&requiredFeature=JKk7i3x8")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/PzOIzZrLWYFqv864/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(24))
                .body("", hasItems("X4DD19DHhNH", "E8", "EJ", "EjR7w1", "2f1nhQQ", "", "ZDUeS1YGLOzY", "LJxPHGWYIMR0", "GVK6n", "PgMExsUTL", "w5xul2U", "7sQaEnCUHSk", "NiddYYK", "InwAG1ZL_OC1", "wkNnngQgYoN4", "btkg6wcdhi1w", "5MEo3v", "VQvOuy1Z", "nQQD52i6oIDZS", "MvohIvF", "PrY", "PrY", "PrY", "PzOIzZrLWYFqv864"));
        
    }
    
    
    /**
    * [test_22_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_22_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 600L)
                .d("NAME", "\"_EM_315_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 599L)
                .d("ID", "-15506")
            .and().insertInto("PRODUCT", 598L)
                .d("NAME", "\"OvO8lxkd4B\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 597L)
                .d("ID", "405")
            .and().insertInto("PRODUCT", 596L)
                .d("NAME", "\"7VCEf37Dlf\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 595L)
                .d("ID", "623")
            .and().insertInto("PRODUCT", 594L)
                .d("NAME", "\"0mC0IAnGeYejIB\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 593L)
                .d("ID", "8474222305223347251")
            .and().insertInto("PRODUCT", 592L)
                .d("NAME", "\"_EM_316_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 591L)
                .d("ID", "2097924")
            .and().insertInto("PRODUCT", 590L)
                .d("NAME", "\"a54wjgb2jkW\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 589L)
                .d("ID", "-7841")
            .and().insertInto("PRODUCT", 588L)
                .d("NAME", "\"_EM_317_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 587L)
                .d("NAME", "\"_EM_318_XYZ_\"")
            .and().insertInto("PRODUCT", 586L)
                .d("NAME", "\"_EM_319_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 585L)
                .d("NAME", "\"_EM_320_XYZ_\"")
            .and().insertInto("PRODUCT", 584L)
                .d("NAME", "\"aIEu\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 583L)
                .d("NAME", "\"n9nb8SCbkRgALOX\"")
            .and().insertInto("PRODUCT", 582L)
                .d("NAME", "\"_EM_321_XYZ_\"")
            .and().insertInto("PRODUCT", 581L)
                .d("NAME", "\"4cxQq1uQ9Vp\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/_EM_308_XYZ_/features/_EM_309_XYZ_")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/J/configurations/_EM_310_XYZ_/features/KtOSmFX1iG")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/_EM_311_XYZ_/configurations/4/features/_EM_312_XYZ_")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/_EM_313_XYZ_/configurations/a4ONNBFo9vdOK")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/_EM_314_XYZ_/constraints/246")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/6WzP_m")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(11))
                .body("", hasItems("_EM_315_XYZ_", "OvO8lxkd4B", "7VCEf37Dlf", "0mC0IAnGeYejIB", "_EM_316_XYZ_", "a54wjgb2jkW", "_EM_317_XYZ_", "_EM_319_XYZ_", "aIEu", "_EM_321_XYZ_", "4cxQq1uQ9Vp"));
        
    }
    
    
    /**
    * [test_23_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_23_with500() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/5JhMzuvHcl4QiSgv/features/vYJK5eJzASJf9WWo")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_24_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_24_with500() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/B0n")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=7D3t2SHOpW2tMsw")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/B0n/features/FWtdzWIMlwPk"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/B0n/features/FWtdzWIMlwPk"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_64_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_25_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_25_with500() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ZWGVxY/configurations/G/features/6")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_26_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test
    public void test_26_with500() throws Exception {
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/pZKQd4YVXeg3icd")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/pZKQd4YVXeg3icd/configurations/ZWrJCT25QO"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/pZKQd4YVXeg3icd/configurations/ZWrJCT25QO/features/ZMe1b"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test
    public void test_27() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 8174L)
                .d("NAME", "\"Sy\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 8173L)
                .d("ID", "843854722")
            .and().insertInto("PRODUCT", 8172L)
                .d("NAME", "\"pBK\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 8171L)
                .d("ID", "933")
            .and().insertInto("PRODUCT", 8170L)
                .d("NAME", "\"p8Lm7pGCIfO2X5B\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 8169L)
                .d("ID", "859")
            .and().insertInto("PRODUCT", 8168L)
                .d("NAME", "\"vJkQdnuBRcX8\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 8167L)
                .d("ID", "874")
            .and().insertInto("PRODUCT", 8166L)
                .d("NAME", "\"IVnI68WSh\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 8165L)
                .d("ID", "-32429")
            .and().insertInto("PRODUCT", 7249L)
                .d("NAME", "\"9E1JMWsP3\"")
            .and().insertInto("FEATURE", 7248L)
                .d("NAME", "\"_EM_8190_XYZ_\"")
                .r("PRODUCT_ID", 7249L)
            .and().insertInto("PRODUCT", 7247L)
                .d("NAME", "\"DxgGHMU7GvI\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7246L)
                .d("NAME", "\"g7zEby3e\"")
            .and().insertInto("PRODUCT", 7245L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 7244L)
                .d("NAME", "\"TliYYDcEgvXJH_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 7243L)
                .r("IN_CONFIGURATIONS_ID", 7246L)
                .r("ACTIVED_FEATURES_ID", 7244L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/2dq4i")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/2dq4i/configurations/aXPZCNG9G"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/2dq4i/configurations/aXPZCNG9G"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("aXPZCNG9G"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
        List<InsertionDto> insertions1 = sql(insertions).insertInto("PRODUCT", 7038L)
                .d("NAME", "\"C3r\\\\D\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7037L)
                .d("NAME", "\"m\"")
                .d("VALID", "true")
                .r("PRODUCT_ID", 7038L)
            .dtos();
        InsertionResultsDto insertions1result = controller.execInsertionsIntoDatabase(insertions1, insertionsresult);
        
        ValidatableResponse res_3 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/C3r%5CD/configurations/m/features")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/C3r%5CD")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/NCEZW")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/NCEZW/constraints/367"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_28() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 1701L)
                .d("NAME", "\"_EM_876_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1700L)
                .d("NAME", "\"_EQ_877_XYZ_\"")
            .and().insertInto("PRODUCT", 1699L)
                .d("NAME", "\"F19PCfHkmLe5E9\"")
            .and().insertInto("FEATURE", 1698L)
                .d("NAME", "\"_EM_878_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1697L)
                .r("IN_CONFIGURATIONS_ID", 1700L)
                .r("ACTIVED_FEATURES_ID", 1698L)
            .and().insertInto("PRODUCT", 1696L)
                .d("NAME", "\"BGv\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1695L)
                .d("NAME", "\"_EM_879_XYZ_\"")
            .and().insertInto("PRODUCT", 1694L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 1693L)
                .d("NAME", "\"444pPgH501Xgi6W\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1692L)
                .r("IN_CONFIGURATIONS_ID", 1695L)
                .r("ACTIVED_FEATURES_ID", 1698L)
            .and().insertInto("PRODUCT", 1691L)
                .d("NAME", "\"6kNqD\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1690L)
                .d("NAME", "\"Oo1Q4T\"")
            .and().insertInto("PRODUCT", 1689L)
                .d("NAME", "\"cmj0z1EpC9\"")
            .and().insertInto("FEATURE", 1688L)
                .d("NAME", "\"wXPdU\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1687L)
                .r("IN_CONFIGURATIONS_ID", 1690L)
                .r("ACTIVED_FEATURES_ID", 1698L)
            .and().insertInto("PRODUCT", 1686L)
                .d("NAME", "\"_EMo880_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1685L)
                .d("NAME", "\"1\"")
            .and().insertInto("PRODUCT", 1684L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 1683L)
                .d("NAME", "\"GwNXSNxlfhX\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1682L)
                .r("IN_CONFIGURATIONS_ID", 1685L)
                .r("ACTIVED_FEATURES_ID", 1683L)
            .and().insertInto("PRODUCT", 1681L)
                .d("NAME", "\"_EM_6424_XYZ_\"")
            .and().insertInto("FEATURE", 1680L)
                .d("NAME", "\"1Oa7rv\"")
                .r("PRODUCT_ID", 1681L)
            .and().insertInto("PRODUCT", 1679L)
                .d("NAME", "\"_EM_882_XYZ_\"")
            .and().insertInto("FEATURE", 1678L)
                .d("NAME", "\"tbeqy\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 1677L)
                .d("NAME", "\"kbyxl04Eho3tCKv\"")
            .and().insertInto("FEATURE", 1676L)
                .d("NAME", "\"_EM_883_XYZ_Q\"")
                .r("PRODUCT_ID", 1701L)
            .and().insertInto("PRODUCT", 1675L)
                .d("NAME", "\"OJuBQ07s5ND\"")
            .and().insertInto("FEATURE", 1674L)
                .d("NAME", "\"zLmzDQb_zJcYh7w1\"")
                .r("PRODUCT_ID", 1675L)
            .and().insertInto("PRODUCT", 1673L)
                .d("NAME", "\"vbaB\"")
            .and().insertInto("FEATURE", 1672L)
                .d("NAME", "\"_EM_6425_XYZ_\"")
                .r("PRODUCT_ID", 1684L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_6423_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_6423_XYZ_/configurations/UEE_825=%5CYZ_"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_6423_XYZ_/configurations/UEE_825=%5CYZ_"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test
    public void test_29() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EU_UU9U_XYb_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=9B9H9mR")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EU_UU9U_XYb_/features/;u"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=WMRYVZUAb")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/_EU_UU9U_XYb_/features/;u"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EU_UU9U_XYb_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EU_UU9U_XYb_/configurations/1t_o"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/_EU_UU9U_XYb_/configurations/1t_o/features/;u"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test
    public void test_30() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 8552L)
                .d("NAME", "\"l8JbB482h57BA\"")
            .and().insertInto("FEATURE", 8551L)
                .d("NAME", "\"_EM_8526_XYZ_\"")
                .r("PRODUCT_ID", 8552L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EU_UU9U_XYb_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=9B9H9mR")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EU_UU9U_XYb_/features/;u"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=WMRYVZUAb")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/_EU_UU9U_XYb_/features/;u"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/ICfsLkLS2hpwlfPr")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/ICfsLkLS2hpwlfPr/configurations/MB3KR"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/ICfsLkLS2hpwlfPr/configurations/MB3KR"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_31() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/0J5K6NGzQ0H7/configurations/X7o_")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }


}
